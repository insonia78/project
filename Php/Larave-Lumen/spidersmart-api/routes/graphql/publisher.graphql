type Publisher implements RelateableResource {
  id: Int!
  name: String!
  active: Boolean!
  books: [Book]
  dateFrom: DateTime
  dateTo: DateTime
  relatedFrom: DateTime
  relatedTo: DateTime
  __typename: String
}

input PublisherInput {
  id: Int
  name: String
  active: Boolean
  __typename: String
}

type PublisherResponse implements ResponsePayload {
  success: Boolean
  data: Publisher
  errors: [String]
}

extend type Query {
  publishers: [Publisher!]!
    @route(resolver: "Publisher@getAll", operation: "retrieve")
  publisher(id: Int!): Publisher!
    @route(resolver: "Publisher@get", operation: "retrieve")
}

extend type Mutation {
  createPublisher(name: String!, active: Boolean): PublisherResponse
    @route(resolver: "Publisher@create", operation: "create")

  updatePublisher(id: Int!, name: String, active: Boolean): PublisherResponse
    @route(resolver: "Publisher@update", operation: "update")

  deletePublisher(id: Int!): PublisherResponse
    @route(resolver: "Publisher@delete", operation: "delete")
}
