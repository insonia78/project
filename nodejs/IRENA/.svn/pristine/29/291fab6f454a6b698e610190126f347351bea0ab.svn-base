
$(document).ready(function () {

  //bind on click to download
  var optDemand = {
    options: ['North', 'Equator', 'South'],
    folder: '../data/Demand',
    ylabel: 'MW',
    scale: 1
  }

  var optSolar = {
    options: ['High', 'Median', 'Low'],
    folder: '../data/Generation/Solar',
    ylabel: '%',
    scale: 100
  }

  var optWind = {
    options: ['High', 'Median', 'Low'],
    folder: '../data/Generation/Wind',
    ylabel: '%',
    scale: 100
  }

  //Initial Set-up
  clearOutputCharts();
  getData($('#demand-profile-graph1').get(0), 'North', optDemand, 'Northern Hemisphere');
  getData($('#demand-profile-graph2').get(0), 'North', optDemand, 'Northern Hemisphere');
  getData($('#wind-profile-graph').get(0), 'High', optWind, 'High');
  getData($('#solar-profile-graph').get(0), 'High', optSolar, 'High');



  //plot WIND profile depending of user selection
  bindGraph2Select('#basewind',
    '#wind-profile-graph', optWind);

  //plot SOLAr profile depending of user selection
  bindGraph2Select('#basesolar',
    '#solar-profile-graph', optSolar);


  for (var year = 0; year < 2; year++) {
    //plot DEMAND profile depending of user selection
    console.log(year);
    bindGraph2Select('#demandprofile' + (year + 1),
      '#demand-profile-graph' + (year + 1),
      optDemand);

  }



});

function updateOutputProfiles(elementID, paths, year, colIndex, myYlabel) {


  console.log('inside updateOutputProfiles');


  year--;

  var aux = { 'paths': paths, 'year': year, 'col': colIndex };

  //console.log(JSON.stringify(aux));

  $.ajax({
    url: '/get-output-profiles',
    type: 'post',
    data: JSON.stringify(aux),
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    success: function (result) {

      if (result.status == true) {
        //console.log(result)
        var g = new Dygraph($(elementID).get(0), result.profile.join('\n'), {
          // options go here. See http://dygraphs.com/options.html
          legend: 'always',
          animatedZooms: true,
          ylabel: myYlabel
        });
      }
      else {
        console.log('Could not load files');
      }

    }
  });  //Bind this call to a RETRIEVE output API call
};

function updateInputProfiles(elementID, path,options) {
  var aux = { 'path': path };

  //console.log(JSON.stringify(aux));

  $.ajax({
    url: '/get-input-profiles',
    type: 'post',
    data: JSON.stringify(aux),
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    success: function (result) {

      if (result.status == true) {
        var data =processText(result.profile, options.scale);
        console.log(data)
        plotGraph($(elementID).get(0), data, options.ylabel, options.legend)

      }
      else {
        console.log('Could not load input files');
      }

    }
  });  //Bind this call to a RETRIEVE output API call
}


function updateOutputGeneration(elementID, aux, myTitle) {


  console.log('inside updateOutputGeneration');

  // var aux = {
  //   'conventional': path.conventional,
  //   'hydro':path.hydro,
  //   'solar':path.solar,
  //   ''
  //   'wind':path.wind,
  //   'colnames': colnames
  // };

  console.log(aux);

  $.ajax({
    url: '/get-output-generation',
    type: 'post',
    data: JSON.stringify(aux),
    contentType: 'application/json; charset=utf-8',
    dataType: 'json',
    success: function (result) {

      if (result.status == true) {
        console.log('finished ajax to get-output-gen')

        console.log(result)
        table2PieChart($(elementID).get(0), result.generation, myTitle);

      }
      else {
        console.log('Could not load files');
      }

    }
  });  //Bind this call to a RETRIEVE output API call
}



function getData(element, opt, options, myHeader = '') {
  var path = options.folder + '/' + opt + '.csv';
  $.ajax({
    // type: "GET",
    url: path,

    success: function (data) {
      //get data consistency

      plotGraph(element, processText(data, options.scale), options.ylabel, myHeader)

    }
  });
}

function plotGraph(element, data, myYlabel = 'Value', myHeader = 'V') {


  var g = new Dygraph(element, data, {
    // options go here. See http://dygraphs.com/options.html
    legend: 'always',
    animatedZooms: true,
    ylabel: myYlabel,
    xlabel: 'Hour',
    labels: ['Hour', myHeader]
  });


}

function processText(csv, scale = 1) {
  var allTextLines = [];
  if (typeof (csv) === 'string') {
    allTextLines = csv.split(/\r\n|\n/);
  }
  else{
    allTextLines=csv;
  }


  var lines = allTextLines.map(function (val, hour) {
    return [hour, Number(val) * scale];
  });

  return lines;
}

function bindGraph2Select(selectID, graphID, options) {
  $(selectID).change(function () {

    var opt = $(this).find('select').val();
    var allOpt = options.options;//['High', 'Median', 'Low'];
    if (allOpt.includes(opt)) {
      getData($(graphID).get(0), opt, options, $(this).find('select :selected').text())
    }
    if (opt === 'User') {
      $file = $(this).find('.my-file-selector');
      $file.trigger('click');
      if ($file[0].files && $file[0].files[0]) {
        var reader = new FileReader();
        reader.readAsText($file[0].files[0]);

        reader.onload = function (e) {
          var text = e.target.result;
          //text holds the user data in a string, store it somewhere (e.g Window scole) and save if when the user clicks on the same button.


          plotGraph($(graphID).get(0), processText(text, options.scale), options.ylabel, 'User Defined')
        }
      }

    }



    console.log('Select changed to:' + opt);

  });
}


