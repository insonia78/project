$(document).ready(function() {

  //Change this, the user should come 
  //username = "alevo";
  $(':input').val('');

  var project
  var run

  	var reqProject=	{
        "action"  : "RETRIEVE_PROJECTS",
        
	};

  	var reqRun    =   	{
        "action"  : "RETRIEVE_RUNS",
        
	};

  	var reqInputs = 	{
		"action"  : "RETRIEVE_INPUTS"
	};

	var reqOutputs = 	{
		"action"  : "RETRIEVE_RESULTS"
	};


	var $projects = $("#project-options");
	var $runs     = $('#run-options');

	//Load list of projects to options when page is loaded
	console.log('Calling SLT API')
	$.post('get-info',reqProject,
		function(msg){
			res=$.parseJSON(msg);
			updateSelection1($projects,res['projects'],'Project');

	})

	$projects.change(function(){
		//define the project 
		project = $(this).val();		
		reqRun['project']=project;
		reqInputs['project']=project;

		//Update the run options	
		console.log('Calling SLT backend');
		if (typeof reqRun['project'] == 'undefined'){
			console.log('project is undefined')
		}
		else{
			$.post('get-info',reqRun,
				function(msg){
					res=$.parseJSON(msg);
					updateSelection1($runs,res['runs'],'Run');

			})
		}
	
		
	});


	$runs.on('focus',function(){
		console.log('Calling SLT backend')
		if (typeof reqRun['project'] == 'undefined'){
			console.log('project is undefined')
		}
	})
	.change(function(){
		
		reqInputs['run']=$(this).val();
		
		console.log('Calling SLT backend');
		if (typeof reqInputs['run'] == 'undefined'){
			console.log('Run is undefined')
		}
		else{
			//get inputs
			$.post('get-info',reqInputs,
				function(msg){
					var res=$.parseJSON(msg);					
					updateInputs(res.inputs);
					//console.log(res.inputs)

			});

			//get outputs
			reqOutputs['project']=reqInputs['project'];
			reqOutputs['run']=reqInputs['run'];
			$.post('get-info',reqOutputs,
				function(msg){
					var res=$.parseJSON(msg);
					console.log('updating outputs: ')
					updateOutputs(res.output);
			});
		}
	});
  


})


function updateSelection1(element,opts,type){
    var list='<option value=add>Add '+type+'</option>';
    //console.log(element);
   //console.log(opts);
    for (var k=0; k<opts.length;k++){
        list+='<option value='+opts[k]+'>'+opts[k]+'</option>';       
    }
    element.html(list);
    element.trigger("chosen:updated");
}

function updateInputs(inputs){
	console.log('updating inputs')

	for(var key in inputs){
		if(inputs.hasOwnProperty(key)){
		$('#'+key).val(inputs[key]);
		}
	}
	//get hydro reserve
	for (var k=0;k<inputs['hydrores'].length;k++){
		element ='#'+'hydrores'+(k+1); 
		$(element).val(inputs['hydrores'][k]);
	}

	//get yearly results
	var yearly=inputs['yearly'];	
	for(var k = 0; k<yearly.length;k++){
		var yearN=yearly[k]; 

		for(var key in yearN){
			if(yearN.hasOwnProperty(key)){
				element ='#'+key+yearN['year']; 
				$(element).val(yearN[key]);
				
			}
		}
		//get hydro profile
		for (var y=0;y<yearN['hydroEng'].length;y++){
			element ='#'+'hydroEng'+(k+1)+'_'+(y+1); 
			$(element).val(yearN['hydroEng'][y]);			
		}
	}

	//update the conventional generation
	var conGen=inputs['slt_conventional_generation'];
	var $capByFuel=$('#cap-by-fuel-dynamic>tbody')
	for(var k = 0; k<conGen.length;k++){
		var Gen =conGen[k];//generator
		$capByFuel.find('.carbon_rate:eq('+k+')').val(Gen['carbon_rate']);
		$capByFuel.find('.heatrate:eq('+k+')').val(Gen['heatrate']);
		$capByFuel.find('.vom:eq('+k+')').val(Gen['vom']);
		$capByFuel.find('.p_reserve:eq('+k+')').val(Gen['p_reserve']);
		$capByFuel.find('.s_reserve:eq('+k+')').val(Gen['s_reserve']);
		$capByFuel.find('.t_reserve:eq('+k+')').val(Gen['t_reserve']);


		var yearly=Gen['yearly'];
		for (var y=0;y<yearly.length;y++){
			$capByFuel.find('.pconcap'+(y+1)+':eq('+k+')').val(yearly[y]['pconcap']);
			$capByFuel.find('.fuelprice'+(y+1)+':eq('+k+')').val(yearly[y]['fuelprice']);
		}

		if(k>3){
			currentEntry = $('#cap-by-fuel-dynamic tbody tr:last');
			newEntry = $(currentEntry.clone()).appendTo(controlForm.parents('tbody'));


			currentEntry.find('td span .btn-add')
				.removeClass('btn-add').addClass('btn-remove')
				.removeClass('btn-primary').addClass('btn-default')
				.html('<span class="glyphicon glyphicon-minus"></span>');    
		}
		//console.log(Gen)
	}
}

//Update the Outputs
function updateOutputs(outputs){
	console.log('The outputs are: ')
	console.log(outputs)
	var yearly = outputs['yearly'];
	for (var y=0;y<yearly.length;y++){
		
		//update storage benefit buckets for each year
		var bucket = yearly[y]['storageBenefitBuckets'];
		console.log(bucket)
		for(var key in bucket){
			if(bucket.hasOwnProperty(key)){
			$('.'+key+':eq('+y+')').html(bucket[key]);
			}
		}

		//update energy storage size for each year
		var energySize = yearly[y]['energyStorageSize']['energy'];
		for(var key in energySize){
			if(energySize.hasOwnProperty(key)){
				id='E_cap_es_'+key.replace(/[.]/g,'');
				$('.'+id+':eq('+y+')').html(energySize[key]);
			}
		}

		//update power of energy storage for each year
		var powerSize = yearly[y]['energyStorageSize']['power'];
		for(var key in powerSize){
			if(powerSize.hasOwnProperty(key)){
				id='P_cap_es_'+key.replace(/[.]/g,'');
				$('.'+id+':eq('+y+')').html(powerSize[key]);
			}
		}


	}
}