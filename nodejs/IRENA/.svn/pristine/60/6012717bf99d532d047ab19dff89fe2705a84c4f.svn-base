
$(document).ready(function () {

  console.log('test - 123')
  $('#calculate-btn').click(
    function (e) {
      console.log("calculate button pressed");
      e.preventDefault();
      if (validate_data()) {
        var valuationData = {};
        valuationData = get_data_to_save("");

        $.ajax(
          {
            type: 'POST',
            url: 'save_slt_input',
            data: valuationData,
            success: function (msg) {
              $.ajax(
                {
                  type: 'POST',
                  url: 'calculate-valuation',
                  data: {
                    "username": valuationData.username,
                    "project": valuationData.project,
                    "run": valuationData.run
                  },
                  success: function () {
                    swal("Data Saved and Calculation Submitted");


                  }
                }
              ).always(function (msg) {
                console.log('Start to update project run !!!')
                updateProjectRunLists(valuationData.username);

              });
            }
          }
        );



      }
    }
  );

  //SAVE TO DATABASE EXAMPLE
  $('#save-btn').click(
    function (e) {
      console.log("save button pressed");
      e.preventDefault();

      if (validate_data()) {
        var valuationData = {};
        valuationData = get_data_to_save("");

        $.ajax(
          {
            type: 'POST',
            url: 'save_slt_input',
            data: valuationData,
            success: function (msg) {
              swal("Data Saved");
            }
          }
        ).always(function () {
          console.log('Start to update project run !!!')
          updateProjectRunLists(valuationData.username);

        });
        swal("Data Saved");

      }
      else {
        console.log("save aborted");
      }
    }
  );

}
);

function get_data_to_save(response) {
  console.log("starting to gather data");
  var valuationData = {};
  valuationData.username = $('#username').val();
  valuationData.project = $('#project-options').val();
  valuationData.run = $('#run-options').val();
  valuationData.country = $('#country').val();
  valuationData.eneffpower = $('#eneffpower').val();
  valuationData.eneffeng = $('#eneffeng').val();
  valuationData.eneffcost = $('#eneffcost').val();
  valuationData.demrespower = $('#demrespower').val();
  valuationData.demreseng = $('#demreseng').val();
  valuationData.demrescost = $('#demrescost').val();
  valuationData.distpvpower = $('#distpvpower').val();
  valuationData.distpveng = $('#distpveng').val();
  valuationData.distpvcost = $('#distpvcost').val();
  valuationData.windcap1 = $('#windcap1').val();
  valuationData.windcap2 = $('#windcap2').val();
  valuationData.windcost = $('#windcost').val();
  valuationData.solarcap1 = $('#solarcap1').val();
  valuationData.solarcap2 = $('#solarcap2').val();
  valuationData.solarcost = $('#solarcost').val();
  valuationData.demandprofile1 = $('#demandprofile1 select').val();
  valuationData.demandprofile2 = $('#demandprofile2 select').val();
  valuationData.inputpeak1 = $('#inputpeak1').val();
  valuationData.inputpeak2 = $('#inputpeak2').val();
  valuationData.inputenergy1 = $('#inputenergy1').val();
  valuationData.inputenergy2 = $('#inputenergy2').val();
  valuationData.peakdemgrowrt1 = $('#peakdemgrowrt1').val();
  valuationData.peakdemgrowrt2 = $('#peakdemgrowrt2').val();
  valuationData.basewind = $('#basewind').val();
  //        valuationData.basewind = "/opt/www/SystemLevelToolApi/data/Generation/Wind/Median.csv";
  valuationData.windpeakcap = $('#windpeakcap').val();
  valuationData.basesolar = $('#basesolar').val();
  //		valuationData.basesolar = "/opt/www/SystemLevelToolApi/data/Generation/Solar/Median.csv";
  valuationData.solarpeakcap = $('#solarpeakcap').val();
  valuationData.hydroEng0101 = $('#hydroEng1_1').val();
  valuationData.hydroEng0102 = $('#hydroEng1_2').val();
  valuationData.hydroEng0103 = $('#hydroEng1_3').val();
  valuationData.hydroEng0104 = $('#hydroEng1_4').val();
  valuationData.hydroEng0105 = $('#hydroEng1_5').val();
  valuationData.hydroEng0106 = $('#hydroEng1_6').val();
  valuationData.hydroEng0107 = $('#hydroEng1_7').val();
  valuationData.hydroEng0108 = $('#hydroEng1_8').val();
  valuationData.hydroEng0109 = $('#hydroEng1_9').val();
  valuationData.hydroEng0110 = $('#hydroEng1_10').val();
  valuationData.hydroEng0111 = $('#hydroEng1_11').val();
  valuationData.hydroEng0112 = $('#hydroEng1_12').val();
  valuationData.hydroEng0201 = $('#hydroEng2_1').val();
  valuationData.hydroEng0202 = $('#hydroEng2_2').val();
  valuationData.hydroEng0203 = $('#hydroEng2_3').val();
  valuationData.hydroEng0204 = $('#hydroEng2_4').val();
  valuationData.hydroEng0205 = $('#hydroEng2_5').val();
  valuationData.hydroEng0206 = $('#hydroEng2_6').val();
  valuationData.hydroEng0207 = $('#hydroEng2_7').val();
  valuationData.hydroEng0208 = $('#hydroEng2_8').val();
  valuationData.hydroEng0209 = $('#hydroEng2_9').val();
  valuationData.hydroEng0210 = $('#hydroEng2_10').val();
  valuationData.hydroEng0211 = $('#hydroEng2_11').val();
  valuationData.hydroEng0212 = $('#hydroEng2_12').val();
  valuationData.hypmax1 = $('#hypmax1').val();
  valuationData.hypmax2 = $('#hypmax2').val();
  valuationData.hydrores1 = $('#hydrores1').val();
  valuationData.hydrores2 = $('#hydrores2').val();
  valuationData.hydrores3 = $('#hydrores3').val();
  valuationData.p_reserves = $('#p_reserves').val();
  valuationData.s_reserves = $('#s_reserves').val();
  valuationData.t_reserves = $('#t_reserves').val();
  valuationData.esrt2c = $('#esrt2c').val();
  valuationData.esrt1c = $('#esrt1c').val();
  valuationData.esrt5c = $('#esrt5c').val();
  valuationData.esrt25c = $('#esrt25c').val();
  valuationData.escost2c = $('#escost2c').val();
  valuationData.escost1c = $('#escost1c').val();
  valuationData.escost5c = $('#escost5c').val();
  valuationData.escost25c = $('#escost25c').val();

  valuationData.esfom2c = $('#esfom2c').val();
  valuationData.esfom1c = $('#esfom1c').val();
  valuationData.esfom5c = $('#esfom5c').val();
  valuationData.esfom25c = $('#esfom25c').val();
  valuationData.esvom2c = $('#esvom2c').val();
  valuationData.esvom1c = $('#esvom1c').val();
  valuationData.esvom5c = $('#esvom5c').val();
  valuationData.esvom25c = $('#esvom25c').val();
  valuationData.popul = $('#popul').val();

  valuationData.carboncost = $('#carboncost').val();
  valuationData.translength = $('#translength').val();
  valuationData.distlength = $('#distlength').val();
  valuationData.planresmargin = $('#planresmargin').val();
  valuationData.transcongind = $('#transcongind').val();
  valuationData.demforrisk = $('#demforrisk').val();
  valuationData.geodivind = $('#geodivind').val();
  valuationData.outageIndices = $('#outageIndices').val();
  valuationData.vallossload = $('#vallossload').val();
  valuationData.renoutforrisk = $('#renoutforrisk').val();
  valuationData.freregvalue = $('#freregvalue').val();
  valuationData.peakcapital = $('#peakcapital').val();
  valuationData.convfactor = $('#convfactor').val();

  var valuationDataConventional = [];
  var $Conventional = $('#cap-by-fuel-dynamic>tbody');
  var conventional_rows = $Conventional[0].childElementCount;
  for (var k = 0; k < conventional_rows; k++) {
    valuationDataConventional[k] = [];
    if (k == 0) { valuationDataConventional[k][0] = 'Compressed Natural Gas (CNG)' };
    if (k == 1) { valuationDataConventional[k][0] = 'Coal' };
    if (k > 1) { valuationDataConventional[k][0] = $Conventional.find('.fuel-options:eq(' + (k - 2) + ') :selected').text(); };
    valuationDataConventional[k][1] = $Conventional.find('.pconcap1:eq(' + k + ')').val();
    valuationDataConventional[k][2] = $Conventional.find('.pconcap2:eq(' + k + ')').val();
    valuationDataConventional[k][3] = $Conventional.find('.fuelprice1:eq(' + k + ')').val();
    valuationDataConventional[k][4] = $Conventional.find('.fuelprice2:eq(' + k + ')').val();
    valuationDataConventional[k][5] = $Conventional.find('.heatrate:eq(' + k + ')').val();
    valuationDataConventional[k][6] = $Conventional.find('.vom:eq(' + k + ')').val();
    valuationDataConventional[k][7] = $Conventional.find('.p_reserve:eq(' + k + ')').val();
    valuationDataConventional[k][8] = $Conventional.find('.s_reserve:eq(' + k + ')').val();
    valuationDataConventional[k][9] = $Conventional.find('.t_reserve:eq(' + k + ')').val();
    valuationDataConventional[k][10] = $Conventional.find('.carbon_rate:eq(' + k + ')').val();
  }
  valuationData.Conventional = valuationDataConventional;
  console.log("got the data together");
  return valuationData;
}

function populateResponse(response) {
  console.log(response);

  $('#P_cap_es_200C').html(Math.round(response.P_cap_es_200C * 100) / 100);
  $('#E_cap_es_200C').html(Math.round(response.E_cap_es_200C * 100) / 100);
  $('#P_cap_es_100C').html(Math.round(response.P_cap_es_100C * 100) / 100);
  $('#E_cap_es_100C').html(Math.round(response.E_cap_es_100C * 100) / 100);
  $('#P_cap_es_050C').html(Math.round(response.P_cap_es_050C * 100) / 100);
  $('#E_cap_es_050C').html(Math.round(response.E_cap_es_050C * 100) / 100);
  $('#P_cap_es_025C').html(Math.round(response.P_cap_es_025C * 100) / 100);
  $('#E_cap_es_025C').html(Math.round(response.E_cap_es_025C * 100) / 100);
}

function validate_data(response) {
    console.log("validating");

    var string_to_validate = "";
    var year2_required = false;

    string_to_validate = ($('#project-options').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#project-options').focus();
      swal("", "Invalid value for Project", "error");
      return false;
    }
    string_to_validate = ($('#run-options').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#run-options').focus();
      swal("", "Invalid value for Run", "error");
      return false;
    }
    string_to_validate = ($('#country').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#country').focus();
      swal("", "Invalid value for Country", "error");
      return false;
    }
    string_to_validate = ($('#eneffpower').val());
    if (isNaN(string_to_validate)) 
    { 
      $('#eneffpower').focus();
      swal("", "Invalid value for Energy Efficiency Power(MW)", "error");
      return false;
    }
    string_to_validate = ($('#eneffeng').val());
    if (isNaN(string_to_validate)) 
    {
      $('#eneffeng').focus();
      swal("", "Invalid value for Energy Efficiency Energy(MWh)", "error");
      return false;
    }
    string_to_validate = ($('#eneffcost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#eneffcost').focus();
      swal("", "Invalid value for Energy Efficiency Cost($/MWh)", "error");
      return false;
    }
   string_to_validate = ($('#demrespower').val());
   if (isNaN(string_to_validate)) 
   {
      $('#demrespower').focus();
      swal("", "Invalid value for Demand Response Power(MW)", "error");
      return false;
    }
    string_to_validate = ($('#demreseng').val());
    if (isNaN(string_to_validate)) 
    {
      $('#demreseng').focus();
      swal("", "Invalid value for Demand Response Energy(MWh)", "error");
      return false;
    }
    string_to_validate = ($('#demrescost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#demrescost').focus();
      swal("", "Invalid value for Demand Response Cost($/MWh)", "error");
      return false;
    }
    string_to_validate = ($('#distpvpower').val());
    if (isNaN(string_to_validate)) 
    {
      $('#distpvpower').focus();
      swal("", "Invalid value for Distributed PV Power(MW)", "error");
      return false;
    }
    string_to_validate = ($('#distpveng').val());
    if (isNaN(string_to_validate)) 
    {
      $('#distpveng').focus();
      swal("", "Invalid value for Distributed PV Energy(MWh)", "error");
      return false;
    }
    string_to_validate = ($('#distpvcost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#distpvcost').focus();
      swal("", "Invalid value for Distributed PV Cost($/MWh)", "error");
      return false;
    }
    string_to_validate = ($('#windcap1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
      $('#windcap1').focus();
      swal("", "Invalid value for Wind Capacity Year 1 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#windcap2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#windcap2').focus();
      swal("", "Invalid value for Wind Capacity Year 2 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#windcost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#windcost').focus();
      swal("", "Invalid value for Wind Cost ($/MWh)", "error");
      return false;
    }
    string_to_validate = ($('#solarcap1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
      $('#solarcap1').focus();
      swal("", "Invalid value for Solar Capacity Year 1 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#solarcap2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#solarcap2').focus();
      swal("", "Invalid value for Solar Capacity Year 2 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#solarcost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#solarcost').focus();
      swal("", "Invalid value for Solar Cost ($/MWh)", "error");
      return false;
    }
    string_to_validate = ($('#demandprofile1 select').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#demandprofile1').focus();
      swal("", "Invalid value for Demand Profile 1st Year", "error");
      return false;
    }
    
    //  if (!(validate_field(string_to_validate, "string"))) {
    //      $('#demandprofile2').focus();
    //      swal("", "Invalid value for Demand Profile 2nd Year", "error");
    //      return false;
    //  }
    string_to_validate = ($('#inputpeak1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#inputpeak1').focus();
      swal("", "Invalid value for Peak Electricity Demand 1st Year", "error");
      return false;
    }
    string_to_validate = ($('#inputpeak2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#inputpeak2').focus();
      swal("", "Invalid value for Peak Electricity Demand 2nd Year", "error");
      return false;
    }    
    string_to_validate = ($('#inputenergy1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#inputenergy1').focus();
      swal("", "Invalid value for Annual Energy Demand 1st Year", "error");
      return false;
    }
    string_to_validate = ($('#inputenergy2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#inputenergy_yr2').focus();
      swal("", "Invalid value for Annual Energy Demand 2nd Year", "error");
      return false;
    }
    string_to_validate = ($('#peakdemgrowrt1').val());
    if (isNaN(string_to_validate)) 
    {
      $('#peakdemgrowrt1').focus();
      swal("", "Invalid value for Peak Demand Growth Rate 1st Year", "error");
      return false;
    }
    string_to_validate = ($('#peakdemgrowrt2').val());
    if (isNaN(string_to_validate)) 
    {
     $('#peakdemgrowrt2').focus();
     swal("", "Invalid value for Peak Demand Growth Rate 2nd Year", "error");
     return false;
    }
    string_to_validate = ($('#basewind').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#basewind').focus();
      swal("", "Invalid value for Wind Profile (%)", "error");
      return false;
    }
    string_to_validate = ($('#basesolar').val());
    if (!(validate_field(string_to_validate, "string"))) 
    {
      $('#basesolar').focus();
      swal("", "Invalid value for Solar Profile (%)", "error");
      return false;
    }
    string_to_validate = ($('#windpeakcap').val());
    if (!(validate_field(string_to_validate, "float", -1, 100)))
    {
      $('#windpeakcap').focus();
      swal("", "Invalid value for Wind Cap at Peak (%)", "error");
      return false;
    }
    string_to_validate = ($('#solarpeakcap').val());
    if (isNaN(string_to_validate)) 
    {
      $('#solarpeakcap').focus();
      swal("", "Invalid value for Solar Cap at Peak (%)", "error");
      return false;
     }
    string_to_validate = ($('#hydroEng1_1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_1').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Jan", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_2').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_2').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Feb", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_3').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_3').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Mar", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_4').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_4').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Apr", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_5').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_5').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) May", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_6').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_6').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Jun", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_7').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_7').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Jul", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_8').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_8').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Aug", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_9').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_9').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Sep", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_10').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_10').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Oct", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_11').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_11').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Nov", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng1_12').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydroEng1_12').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 1 (GWh) Dec", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_1').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_1').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Jan", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_2').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Feb", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_3').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_3').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Mar", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_4').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_4').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Apr", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_5').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_5').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) May", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_6').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_6').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Jun", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_7').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_7').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Jul", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_8').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_8').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Aug", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_9').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_9').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Sep", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_10').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_10').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Oct", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_11').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_11').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Nov", "error");
      return false;
    }
    string_to_validate = ($('#hydroEng2_12').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hydroEng2_12').focus();
      swal("", "Invalid value for Hydro Monthly Energy Year 2 (GWh) Dec", "error");
      return false;
    }
    string_to_validate = ($('#hypmax1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hypmax1').focus();
      swal("", "Invalid value for Hydro Capacity Year 1 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#hypmax2').val());
    if (isNaN(string_to_validate)) 
    {
      $('#hypmax2').focus();
      swal("", "Invalid value for Hydro Capacity Year 2 (MW)", "error");
      return false;
    }
    string_to_validate = ($('#hydrores1').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydrores1').focus();
      swal("", "Invalid value for Hydro 1st Reserve Cost ($/MW)", "error");
      return false;
    }
    string_to_validate = ($('#hydrores2').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydrores2').focus();
      swal("", "Invalid value for Hydro 2nd Reserve Cost ($/MW)", "error");
      return false;
    }
    string_to_validate = ($('#hydrores3').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#hydrores3').focus();
      swal("", "Invalid value for Hydro 3rd Reserve Cost ($/MW)", "error");
      return false;
    }
    string_to_validate = ($('#p_reserves').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#p_reserves').focus();
      swal("", "Invalid value for Primary Reserves Provision (MW)", "error");
      return false;
    }
    string_to_validate = ($('#s_reserves').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#s_reserves').focus();
      swal("", "Invalid value for Secondary Reserves Provision (MW)", "error");
      return false;
    }
    string_to_validate = ($('#t_reserves').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#t_reserves').focus();
      swal("", "Invalid value for Tertiary Reserves Provision (MW)", "error");
      return false;
    }
    string_to_validate = ($('#esrt2c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esrt2c').focus();
      swal("", "Invalid value for Round Trip Efficiency Short Duration(2C)", "error");
      return false;
    }
    string_to_validate = ($('#esrt1c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esrt1c').focus();
      swal("", "Invalid value for Round Trip Efficiency 1C", "error");
      return false;
    }
    string_to_validate = ($('#esrt5c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esrt5c').focus();
      swal("", "Invalid value for Round Trip Efficiency 0.5C", "error");
      return false;
    }
    string_to_validate = ($('#esrt25c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esrt25c').focus();
      swal("", "Invalid value for Round Trip Efficiency 0.25C", "error");
      return false;
    }
    string_to_validate = ($('#escost2c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esrt2c').focus();
      swal("", "Invalid value for Intallation Cost Short Duration(2C)", "error");
      return false;
    }
    string_to_validate = ($('#escost1c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#escost1c').focus();
      swal("", "Invalid value for Intallation Cost 1C", "error");
      return false;
    }
    string_to_validate = ($('#escost5c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#escost5c').focus();
      swal("", "Invalid value for Intallation Cost 0.5C", "error");
      return false;
    }
    string_to_validate = ($('#escost25c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#escost25c').focus();
      swal("", "Invalid value for Intallation Cost 0.25C", "error");
      return false;
    }
    string_to_validate = ($('#esfom2c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esfom2c').focus();
      swal("", "Invalid value for FO&M Short Duration(2C)", "error");
      return false;
    }
    string_to_validate = ($('#esfom1c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esfom1c').focus();
      swal("", "Invalid value for FO&M Medium-Short Duration(1C)", "error");
      return false;
    }
    string_to_validate = ($('#esfom5c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esfom5c').focus();
      swal("", "Invalid value for FO&M Medium-Long Duration(0.5C)", "error");
      return false;
    }
    string_to_validate = ($('#esfom25c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esfom25c').focus();
      swal("", "Invalid value for FO&M Long Duration(0.25C)", "error");
      return false;
    }
    string_to_validate = ($('#esvom2c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esvom2c').focus();
      swal("", "Invalid value for VO&M Short Duration(2C)", "error");
      return false;
    }
    string_to_validate = ($('#esvom1c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esvom1c').focus();
      swal("", "Invalid value for VO&M Medium-Short Duration(1C)", "error");
      return false;
    }
    string_to_validate = ($('#esvom5c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esvom5c').focus();
      swal("", "Invalid value for VO&M Medium-Long Duration(0.5C)", "error");
      return false;
    }
    string_to_validate = ($('#esvom25c').val());
    if (isNaN(string_to_validate)) 
    {
      $('#esvom25c').focus();
      swal("", "Invalid value for VO&M Long Duration(0.25C)", "error");
      return false;
    }
    string_to_validate = ($('#popul').val());
    if (isNaN(string_to_validate)) 
    {
      $('#popul').focus();
      swal("", "Invalid value for Population", "error");
      return false;
    }
    string_to_validate = ($('#carboncost').val());
    if (isNaN(string_to_validate)) 
    {
      $('#carboncost').focus();
      swal("", "Invalid value for Carbon Cost", "error");
      return false;
    }
    string_to_validate = ($('#translength').val());
    if (isNaN(string_to_validate)) 
    {
     $('#translength').focus();
      swal("", "Invalid value for Length of Transmission Lines", "error");
      return false;
    }
    string_to_validate = ($('#distlength').val());
    if (isNaN(string_to_validate)) 
    {
      $('#distlength').focus();
      swal("", "Invalid value for Length of Distribution Lines", "error");
      return false;
    }
    string_to_validate = ($('#planresmargin').val());
    if (isNaN(string_to_validate)) 
    {
      $('#planresmargin').focus();
      swal("", "Invalid value for Planning Reserve Margin", "error");
      return false;
    }
    string_to_validate = ($('#transcongind').val());
    if (isNaN(string_to_validate)) 
    {
      $('#transcongind').focus();
      swal("", "Invalid value for Transmission Congestion Indicator", "error");
      return false;
    }
    string_to_validate = ($('#demforrisk').val());
    if (isNaN(string_to_validate)) 
    {
      $('#demforrisk').focus();
      swal("", "Invalid value for Demand Forecast Risk", "error");
      return false;
    }
    string_to_validate = ($('#geodivind').val());
    if (isNaN(string_to_validate)) 
    {
      $('#geodivind').focus();
      swal("", "Invalid value for Geo Diversity Indicator", "error");
      return false;
    }
   string_to_validate = ($('#outageIndices').val());
    if (isNaN(string_to_validate)) 
    {
      $('#outageIndices').focus();
      swal("", "Invalid value for Outage Indices", "error");
      return false;
    }
    string_to_validate = ($('#vallossload').val());
    if (isNaN(string_to_validate)) 
    {
      $('#vallossload').focus();
      swal("", "Invalid value for Value of Loss Load", "error");
      return false;
    }
    string_to_validate = ($('#renoutforrisk').val());
    if (isNaN(string_to_validate)) 
    {
      $('#renoutforrisk').focus();
      swal("", "Invalid value for Renewables Output Forecast Risk", "error");
      return false;
    }
    string_to_validate = ($('#freregvalue').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#freregvalue').focus();
      swal("", "Invalid value for Frequency Regulation Market Payment or Value", "error");
      return false;
    }
    string_to_validate = ($('#peakcapital').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#peakcapital').focus();
      swal("", "Invalid value for Value of Avoided Generation Cost", "error");
      return false;
    }
    string_to_validate = ($('#convfactor').val());
    if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
    {
      $('#convfactor').focus();
      swal("", "Invalid value for US Dollar to Local Currency Conversion Factor", "error");
      return false;
    }

    // if a 2nd year demand profile is selected then the other 2nd year fields are required
    if (($('#demandprofile2 select').val()) != "Select a Region") {year2_required = true;}
    if (year2_required == true)
    {
     string_to_validate = ($('#windcap2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#windcap2').focus();
       swal("", "Value for Wind Capacity Year 2 (MW) is required", "error");
       return false;
     }
     string_to_validate = ($('#solarcap2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#solarcap2').focus();
       swal("", "Value for Solar Capacity Year 2 (MW) is required", "error");
       return false;
     }
     string_to_validate = ($('#inputpeak2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#inputpeak2').focus();
       swal("", "Value for Peak Electricity Demand 2nd Year is required", "error");
       return false;
     }
     string_to_validate = ($('#inputenergy2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#inputenergy2').focus();
       swal("", "Value for Annual Energy Demand 2nd Year is required", "error");
       return false;
     }
     string_to_validate = ($('#peakdemgrowrt2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#peakdemgrowrt2').focus();
       swal("", "Value for Peak Demand Growth Rate 2nd Year is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_1').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_1').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Jan is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_2').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Feb is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_3').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_3').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Mar is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_4').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_4').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Apr is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_5').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_5').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) May is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_6').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_6').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Jun is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_7').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_7').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Jul is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_8').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_8').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Aug is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_9').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_9').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Sep is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_10').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_10').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Oct is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_11').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_11').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Nov is required", "error");
       return false;
     }
     string_to_validate = ($('#hydroEng2_12').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hydroEng2_12').focus();
       swal("", "Value for Hydro Monthly Energy Year 2 (GWh) Dec is required", "error");
       return false;
     }

     string_to_validate = ($('#hypmax2').val());
     if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
     {
       $('#hypmax2').focus();
       swal("", "Value for Hydro Capacity Year 2 (MW) is required", "error");
       return false;
     }
    }

    
    var $Conventional = $('#cap-by-fuel-dynamic>tbody');
    var conventional_rows = $Conventional[0].childElementCount;
    for (var k = 0; k < conventional_rows; k++) {
        string_to_validate = $Conventional.find('.pconcap1:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for Capacity Year 1 (MW)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.pconcap2:eq(' + k + ')').val();
        if (isNaN(string_to_validate)) 
        {
          swal("", "Invalid value for Capacity Year 2 (MW)", "error");
          return false;
        }
        string_to_validate = $Conventional.find('.fuelprice1:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for Fuel Price Year 1 ($/mmBTU)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.fuelprice2:eq(' + k + ')').val();
        if (isNaN(string_to_validate)) 
        {
         swal("", "Invalid value for Fuel Price Year 2 ($/mmBTU)", "error");
         return false;
        }
        string_to_validate = $Conventional.find('.heatrate:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for Heat Rate (BTU/kWh)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.vom:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for VO&M Cost ($/MWh)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.p_reserve:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for 1st Reserve Cost ($/MW)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.s_reserve:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for 2nd Reserve Cost ($/MW)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.t_reserve:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 10000000))) {
            swal("", "Invalid value for 3rd Reserve Cost ($/MW)", "error");
            return false;
        }        
        string_to_validate = $Conventional.find('.carbon_rate:eq(' + k + ')').val();
        if (!(validate_field(string_to_validate, "float", -1, 100000))) {
            swal("", "Invalid value for Carbon Rate (Ton/MWh)", "error");
            return false;
        }
        string_to_validate = $Conventional.find('.carbon_rate:eq(' + k + ')').val();
        if (isNaN(string_to_validate)) 
        {
           swal("", "Invalid value for Carbon Rate (Ton/MWh)", "error");
          return false;
        }

        // if a 2nd year demand profile is selected then the other 2nd year fields are required
        if (year2_required == true)
        {
         string_to_validate = $Conventional.find('.pconcap2:eq(' + k + ')').val();
         if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
         {
           swal("", "Value for Capacity Year 2 (MW) is required", "error");
           return false;
         }

         string_to_validate = $Conventional.find('.fuelprice2:eq(' + k + ')').val();
         if (!(validate_field(string_to_validate, "float", -1, 10000000))) 
         {
           swal("", "Value for Fuel Price Year 2 ($/mmBTU) is required", "error");
           return false;
         }           
        }
    }
    console.log("validated");
    return true;
}

function validate_field(string_to_validate, ftype, min, max) {
  console.log(string_to_validate);
  if (string_to_validate == undefined) { return false; }
  if (string_to_validate == null) { return false; }
  if (validator.isEmpty(string_to_validate)) { return false; }
  if (ftype == "integer") {
    if (!(validator.isInt(string_to_validate, { gt: min, lt: max }))) { return false; }
  }
  if (ftype == "float") {
    if (!(validator.isFloat(string_to_validate, { gt: min, lt: max }))) { return false; }
  }
  if (ftype == "string") {
    if (string_to_validate == "Add Project") { return false; }
    if (string_to_validate == "Add Run") { return false; }
    if (string_to_validate == "add") { return false; }
    if (string_to_validate == "Select a country") { return false; }
    if (string_to_validate == "Select a region") { return false; }
    if (string_to_validate == "Select a scenario") { return false; }
  }
  return true;

  //    if (!(validator.isNumeric(string_to_validate))) { return false;}

}



