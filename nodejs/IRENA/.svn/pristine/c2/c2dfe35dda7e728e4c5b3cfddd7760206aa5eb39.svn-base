$(document).ready(
	function () {
		//$(':input').val('');

		var project;
		var run;
		var username = $('#username').val();

		var reqProject = {
			"action": "RETRIEVE_PROJECTS",
			"username": username
		};

		var reqRun = {
			"action": "RETRIEVE_RUNS",
			"username": username
		};

		var reqInputs = {
			"action": "RETRIEVE_INPUTS",
			"username": username
		};

		var reqOutputs = {
			"action": "RETRIEVE_RESULTS",
			"username": username,
			"type": "DETAIL"
		};


		var $projects = $("#project-select");
		var $runs = $('#run-select');
		var $samples = $('#sample-select');

		var statusTimer = false;

		//Load list of projects to options when page is loaded
		//console.log('Calling SLT API')
		$.post(
			'get-info',
			reqProject,

			function (msg) {
				console.log(msg);
				res = $.parseJSON(msg);
				updateNavbarSelect($projects, res['projects'], 'Project');
			}
		);

		$projects.change(function () {
			//define the project 
			project = $(this).find(':selected').text();
			$('#project-options').val(project);

			reqRun['project'] = project;
			reqInputs['project'] = project;

			clearOutputCharts();
			$('#status-btn').text('Not Started');
			//check status bar
			if (statusTimer) {
				clearInterval(statusTimer);
				statusTimer = false;
			}
			//Update the run options	
			//console.log('Calling SLT backend');
			if (typeof reqRun['project'] == 'undefined') {
				//console.log('project is undefined')
			}
			else {

				$.post('get-info', reqRun,
					function (msg) {
						res = $.parseJSON(msg);
						updateNavbarSelect($runs, res['runs'], 'Run');
						$('#run-options').val('');
					})
			}


		});

		//get runs
		$runs.on(
			'focus',
			function () {
				//console.log('Calling SLT backend')
				if (typeof reqRun['project'] == 'undefined') {
					//console.log('project is undefined')
				}
			}
		).change(
			function () {


				//set all fields to default or nothing when user changes the run
				var $entryform = $('#page-wrapper')
				$($entryform).find("input[type=text] , textarea ").each(function () {
					$(this).val('');
				});
				$('#demandprofile2 select').val("Select a region");
				$('#demandprofile1 select').val("Select a region");

				reqInputs['run'] = $(this).find(':selected').text();
				$('#run-options').val(reqInputs['run']);

				clearOutputCharts();
				$('#status-btn').text('Not Started');
				var status = 'Not Started';
				//check status bar
				if (statusTimer) {
					clearInterval(statusTimer);
					statusTimer = false;
				}
				//console.log('Calling SLT backend');
				if (typeof reqInputs['run'] == 'undefined') {
					//console.log('Run is undefined')
				}
				else {
					//get inputs
					$.post(
						'get-info',
						reqInputs,
						function (msgIn) {
							var resIn = $.parseJSON(msgIn);
							updateInputs(resIn.inputs);

							//get outputs
							reqOutputs['project'] = reqInputs['project'];
							reqOutputs['run'] = reqInputs['run'];

							//check outputs
							checkStatus();
							statusTimer = setInterval(checkStatus, 2000);

							function checkStatus() {

								$.post(
									'get-info',
									reqOutputs,
									function (msg) {
										var resOut = $.parseJSON(msg);

										console.log(resOut)
										if (resOut['success'] == true) {
											status = resOut.output['status']
											// var statusTimer = setInterval(function () {
											// }, 1000)

											console.log('here1 ' + status)
											if (status == "COMPLETE") {

												updateOutputs(
													resOut.output, resIn.inputs);
											}
										}
										console.log('here2 ' + status)
										$('#status-btn').text(status);
									}
								).done(function () {
									if (status === "COMPLETE") {
										console.log('Status Timer was cleared')
										clearInterval(statusTimer);
									}
								});
							}


						}
					);
				}
			}
			);

		$samples.change(function () {
			console.log('Loading sample ' + $(this)
				.find(':selected').text());
			var run = $(this).val();
			console.log(run)
			$.post('get-samples',
				{
					'run': run
				},
				function (msg) {

					res = $.parseJSON(msg);
					console.log(res);
					if (res.sucess == false) {
						swal("", "We couln't open the Sample \n", "error");
						return;
					}
					clearOutputCharts();
					updateInputs(res.inputs['inputs']);
					updateOutputs(res.outputs['output'], res.inputs['inputs']);

				})

		})
	}
);



function updateProjectRunLists(username) {

	var $projects = $("#project-select");
	var $runs = $('#run-select');
	var project = $('#project-options').val();
	var run = $('#run-options').val();

	var reqProject = {
		"action": "RETRIEVE_PROJECTS",
		"username": username
	};

	var reqRun = {
		"action": "RETRIEVE_RUNS",
		"username": username,
		"project": project
	};


	console.log('update project run lists');
	//update list of projects
	$.post('get-info', reqProject,
		function (msg) {
			res = $.parseJSON(msg);
			updateNavbarSelect($projects, res['projects'], 'Project');
			$projects.val(project);
		});

	//update list of runs
	$.post('get-info', reqRun,
		function (msg) {
			res = $.parseJSON(msg);
			console.log(res['runs']);
			updateNavbarSelect($runs, res['runs'], 'Run');
			$runs.val(run);
		})

	$('#status-btn').text('Not Started');

}

function updateNavbarSelect(element, opts, type) {
	var list = '<option selected="true" value="add" disabled>Select ' + type + '</option>';
	//console.log(element);
	//console.log(opts);
	for (var k = 0; k < opts.length; k++) {
		list += '<option value=' + opts[k] + '>' + opts[k] + '</option>';
	}
	element.html(list);
	element.trigger("chosen:updated");
}

function updateInputs(inputs) {
	console.log('updating inputs')
	console.log(inputs);


	$('#userbasewind').val(inputs.basewind);
	$('#userbasesolar').val(inputs.basesolar);



	inputs['username'] = $('#username').val();//avoid getting the username from samples;
	for (var key in inputs) {
		if (inputs.hasOwnProperty(key)) {
			$('#' + key).val(inputs[key]);
		}
	}
	//get hydro reserve
	for (var k = 0; k < inputs['hydrores'].length; k++) {
		element = '#' + 'hydrores' + (k + 1);
		$(element).val(inputs['hydrores'][k]);
	}


	var basewind = inputs['basewind'].replace(/^.*[\\\/]/, '').split('.');
	var basesolar = inputs['basesolar'].replace(/^.*[\\\/]/, '').split('.');


	var op = { scale: 100, ylabel: '%', legend: basewind[0] };
	//	$("#basewind").val('User');//basewind[0]);
	$('#basewind  select').val(basewind);


	updateInputProfiles('#wind-profile-graph', inputs['basewind'], op)

	op = { scale: 100, ylabel: '%', legend: basesolar[0] };
	//	$("#basesolar").val('User');//basesolar[0]);
	$('#basesolar  select').val(basesolar);

	updateInputProfiles('#solar-profile-graph', inputs['basesolar'], op)



	//get yearly results

	var yearly = inputs['yearly'];
	for (var k = 0; k < yearly.length; k++) {
		var yearN = yearly[k];

		for (var key in yearN) {
			if (yearN.hasOwnProperty(key)) {
				element = '#' + key + yearN['year'];
				$(element).val(yearN[key]);

			}
		}
		//get hydro profile
		for (var y = 0; y < yearN['hydroEng'].length; y++) {
			element = '#' + 'hydroEng' + (k + 1) + '_' + (y + 1);
			$(element).val(yearN['hydroEng'][y]);
		}

		//update demand profile
		var demandprofile = yearN['demandprofile'].replace(/^.*[\\\/]/, '').split('.');


		$("#demandprofile" + (k + 1) + ' select').val(demandprofile[0]);
		$('#userdemandprofile' + (k + 1)).val(yearN['demandprofile']);


		var op = { scale: 1, ylabel: 'MW', legend: demandprofile[0] };
		updateInputProfiles('#demand-profile-graph' + (k + 1), yearN['demandprofile'], op)
		//getData($('#demand-profile-graph' + (k + 1)).get(0), "../data/Demand/" + demandprofile.join('.'), 'MW')


	}

	//update the conventional generation
	var conGen = inputs['slt_conventional_generation'];
	var $capByFuel = $('#cap-by-fuel-dynamic>tbody')

	$capByFuel.find('tr:has(.btn-remove)').remove();

	for (var k = 0; k < conGen.length; k++) {

		if (k > 2) {
			//console.log('addign new conventional Gen');
			addConventionalGen($('#cap-by-fuel-dynamic .btn-add:first'));
		}

		var Gen = conGen[k];//generator
		$capByFuel.find('.unit_type:eq(' + k + ')').val(Gen['unit_type']);
		$capByFuel.find('.carbon_rate:eq(' + k + ')').val(Gen['carbon_rate']);
		$capByFuel.find('.heatrate:eq(' + k + ')').val(Gen['heatrate']);
		$capByFuel.find('.vom:eq(' + k + ')').val(Gen['vom']);
		$capByFuel.find('.p_reserve:eq(' + k + ')').val(Gen['p_reserve']);
		$capByFuel.find('.s_reserve:eq(' + k + ')').val(Gen['s_reserve']);
		$capByFuel.find('.t_reserve:eq(' + k + ')').val(Gen['t_reserve']);
		$capByFuel.find('.fuel-options:eq(' + k + ')').val(Gen['gen_type']);
		$capByFuel.find('.unit-options:eq(' + k + ')').val(Gen['unit_type']);

		var yearly = Gen['yearly'];
		for (var y = 0; y < yearly.length; y++) {
			$capByFuel.find('.pconcap' + (y + 1) + ':eq(' + k + ')').val(yearly[y]['pconcap']);
			$capByFuel.find('.fuelprice' + (y + 1) + ':eq(' + k + ')').val(yearly[y]['fuelprice']);

		}
		updateCapbyFuelChart();
		updateHydroGraph();
	}

	//update the existing storage
	var existing = inputs['slt_existing_storage'];
	var $existingstorage = $('#existing-storage-dynamic>tbody')
	$existingstorage.find('tr:has(.btn-remove)').remove();
	for (var l = 0; l < existing.length; l++) {
		if (l > 0) { addStorageRow($('#existing-storage-dynamic .btn-add:first')); }
		var storagevalues = existing[l];
		//console.log('addign new existing storage');
		$existingstorage.find('.storage-options:eq(' + l + ')').val(storagevalues['storagetype']);
		$existingstorage.find('.espcap:eq(' + l + ')').val(storagevalues['espcap']);
		$existingstorage.find('.esecap:eq(' + l + ')').val(storagevalues['esecap']);

	}




	//assign path to download zip
	var downloadPath = '/get-outputs-zip?username=' + inputs['username'] + '&project=' + inputs['project'] + '&run=' + inputs['run'];
	$('#download-link').attr('href', downloadPath);


}

//Update the Outputs
function updateOutputs(outputs, inputs) {
	console.log('The outputs are: ')
	console.log(outputs)
	slt_con = inputs['slt_conventional_generation'];

	var fuelNames = [];
	fuelNames.push('Hydro');
	fuelNames.push('Solar');
	fuelNames.push('Wind');
	slt_con.map(function (gen) {
		fuelNames.push(gen['gen_type']);
	})


	console.log(slt_con)



	var yearly = outputs['yearly'];
	var convFactor = $('#convfactor').val();
	for (var y = 0; y < yearly.length; y++) {

		//update storage benefit buckets for each year
		var bucket = yearly[y]['storageBenefitBuckets'];
		var data = [];
		//console.log(bucket)
		for (var key in bucket) {
			if (bucket.hasOwnProperty(key)) {
				//update value in US $
				$('.' + key + ':eq(' + y + ')')
					.html(bucket[key]
						.toLocaleString('en-US', { style: 'currency', currency: 'USD', maximumFractionDigits: 0, minimumFractionDigits: 0 }));

				//update value in local currency
				$('.' + key + '_local:eq(' + y + ')')
					.html(((bucket[key]) * convFactor)
						.toLocaleString('en-US', { maximumFractionDigits: 0, minimumFractionDigits: 0 }));

				//2 collumn data array (1st collum: names, 2nd column: value in $)
				data.push([$('.' + key + ':eq(' + y + ')').parent().prev('td').html(), bucket[key]]);

			}
		}
		table2BarChart($('#total-sys-benefits' + (y + 1)).get(0), data, '');


		//update energy storage size for each year
		var energySize = yearly[y]['energyStorageSize']['energy'];
		data = [];
		var sum = 0;
		for (var key in energySize) {
			if (energySize.hasOwnProperty(key)) {
				id = 'E_cap_es_' + key.replace(/[.]/g, '');
				var val = energySize[key];
				sum += val;
				$('.' + id + ':eq(' + y + ')').html(val.toLocaleString('en-US', { maximumFractionDigits: 2 }));

				data.push([key, energySize[key]]);


			}
		}
		table2PieChart($('#piechart_MWh' + (y + 1)).get(0), data, 'Energy');
		$('.E_cap_es_total:eq(' + y + ')').html(sum.toLocaleString('en-US', { maximumFractionDigits: 2 }));

		//update power of energy storage for each year
		var powerSize = yearly[y]['energyStorageSize']['power'];
		data = [];
		sum = 0;
		for (var key in powerSize) {
			if (powerSize.hasOwnProperty(key)) {
				id = 'P_cap_es_' + key.replace(/[.]/g, '');
				var val = powerSize[key]
				sum += val;
				$('.' + id + ':eq(' + y + ')').html(val.toLocaleString('en-US', { maximumFractionDigits: 2 }));

				data.push([key, powerSize[key]]);


			}
		}
		table2PieChart($('#piechart_MW' + (y + 1)).get(0), data, 'Power');
		$('.P_cap_es_total:eq(' + y + ')').html(sum.toLocaleString('en-US', { maximumFractionDigits: 2 }));

		//update profile graphs graphs
		var y_1 = y + 1;
		updateOutputProfiles('#energy_price' + y_1, outputs, y_1, 0, '$/MWh');
		updateOutputProfiles('#primary_price' + y_1, outputs, y_1, 1, '$/MW');
		updateOutputProfiles('#secondary_price' + y_1, outputs, y_1, 2, '$/MW');
		updateOutputProfiles('#tertiary_price' + y_1, outputs, y_1, 3, '$/MW');

		//update generation by fuel type output charts
		updateOutputGeneration('#without_storage' + y_1, {
			'conventional': outputs['yearly'][y]['base']['p_con_year_base'],
			'hydro': outputs['yearly'][y]['base']['p_hydro_year_base'],
			'solar': inputs['basesolar'],
			'wind': inputs['basewind'],
			'solarcap': inputs['yearly'][y]['solarcap'],
			'windcap': inputs['yearly'][y]['windcap'],
			'colnames': fuelNames

		}, 'Without Storage');

		updateOutputGeneration('#with_storage' + y_1, {
			'conventional': outputs['yearly'][y]['es']['p_con_year'],
			'hydro': outputs['yearly'][y]['es']['p_hydro_year'],
			'solar': inputs['basesolar'],
			'wind': inputs['basewind'],
			'solarcap': inputs['yearly'][y]['solarcap'],
			'windcap': inputs['yearly'][y]['windcap'],
			'colnames': fuelNames
		}, 'With Storage');


	}
}

function getModalDictionary(elemendID) {
	$('#modalBody').load('/data-dictionary ' + elemendID, function () {
		$('#myModal').modal('toggle');
		$('#myModalTitle').html('Data Dictionary');
		return false;
	});
}

function getModalUserGuide(elemendID) {
	$('#modalBody').load('/user-guide ' + elemendID, function () {
		$('#myModal').modal('toggle');
		$('#myModalTitle').html('User Guide');
		return false;
	});
}

//anchor focus//
var shiftWindow = function () { scrollBy(0, -105) };
var shiftWindow = function () { scrollBy(0, -105) };
window.addEventListener("hashchange", shiftWindow);
function load() { if (window.location.hash) shiftWindow(); }